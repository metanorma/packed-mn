name: alpine

on:
  push:
    branches: [ main, maxirmx_alpine ]
    tags: [ v* ]
    paths-ignore:
      - .github/workflows/ubuntu.yml
      - .github/workflows/macos.yml
      - .github/workflows/windows.yml
      - .github/workflows/release_tag.yml
      - Makefile.win
  pull_request:
    paths-ignore:
      - .github/workflows/ubuntu.yml
      - .github/workflows/macos.yml
      - .github/workflows/windows.yml
      - .github/workflows/release_tag.yml
      - Makefile.win
  workflow_dispatch:

env:
  CACHE_VER: 01
  OS_VER: "alpine-latest"
  BUILD_TYPE: Release
  CC: gcc
  CXX: g++
# The folders
  TEBAKO_DIR: .archive/tebako
  DEPS: deps
# Versions
  TEBAKO_TAG: "v0.3.7"
  RUBY_VER:   "2.7.5"
  RUBY_HASH:  "2755b900a21235b443bb16dadd9032f784d4a88f143d852bc5d154f22b8781f1"
  BUNDLER_VER: "2.2.3"

jobs:
  setup:
    runs-on: ubuntu-latest
    container:
      image: alpine:3.15
    steps:
      - name: Install packages
        run: |
          apk --no-cache --upgrade add build-base cmake git bash     \
            autoconf boost-static boost-dev flex-dev bison           \
            binutils-dev libarchive-dev libevent-dev acl-dev sed     \
            lz4-dev openssl-dev zlib-dev gflags-dev                  \
            libunwind-dev libdwarf-dev elfutils-dev                  \
            libevent-static openssl-libs-static lz4-static xz-dev    \
            zlib-static libunwind-static acl-static tar libffi-dev   \
            gdbm-dev yaml-dev yaml-static ncurses-dev ncurses-static \
            readline-dev readline-static

      - name: Build libjemalloc
        run: |
          wget -q https://github.com/jemalloc/jemalloc/releases/download/5.2.1/jemalloc-5.2.1.tar.bz2
          tar -xf jemalloc-5.2.1.tar.bz2
          cd jemalloc-5.2.1
          ./configure
          make -j4
          make install

      - name: Checkout tebako packaging environment
        uses: actions/checkout@v3
        with:
          repository: tamatebako/tebako
          path: ${{ env.TEBAKO_DIR }}
          ref: ${{ env.TEBAKO_TAG }}

      - name: Create deps folder
        run: mkdir -p -v ${{ env.TEBAKO_DIR }}/${{ env.DEPS }}

      - name: Tebako setup cache
        id: cache
        uses: actions/cache@v2
        with:
          path: ${{ env.TEBAKO_DIR }}/${{ env.DEPS }}
          key: ${{ env.OS_VER }}-${{ env.CC }}-${{ env.TEBAKO_TAG }}-${{ env.RUBY_HASH }}-v${{ env.CACHE_VER }}

      - name: Tebako setup
        if: steps.cache.outputs.cache-hit != 'true'
        run: ${{ env.TEBAKO_DIR }}/bin/tebako setup

  build:
    runs-on: ubuntu-latest
    needs: setup
    container:
      image: alpine:3.15
    env:
      VCPKG_FORCE_SYSTEM_BINARIES: 1
    steps:
      # ---------- Start of tebako prerequisites
      - name: Install packages
        run: |
          apk --no-cache --upgrade add build-base cmake git bash     \
            autoconf boost-static boost-dev flex-dev bison make      \
            binutils-dev libarchive-dev libevent-dev acl-dev sed     \
            lz4-dev openssl-dev zlib-dev xz ninja zip unzip curl     \
            libunwind-dev libdwarf-dev gflags-dev elfutils-dev       \
            libevent-static openssl-libs-static lz4-static xz-dev    \
            zlib-static libunwind-static acl-static tar libffi-dev   \
            gdbm-dev yaml-dev yaml-static ncurses-dev ncurses-static \
            readline-dev readline-static p7zip ruby-dev gcompat      \
            gettext-dev python3 pkgconfig gperf

      - name: Install bundler
        run: gem install bundler -v ${{ env.BUNDLER_VER }}

      - name: Build libjemalloc
        run: |
          wget -q https://github.com/jemalloc/jemalloc/releases/download/5.2.1/jemalloc-5.2.1.tar.bz2
          tar -xf jemalloc-5.2.1.tar.bz2
          cd jemalloc-5.2.1
          ./configure
          make -j4
          make install

      - name: Checkout packed-mn
        uses: actions/checkout@v3

      - name: Checkout tebako packaging environment
        uses: actions/checkout@v3
        with:
          repository: tamatebako/tebako
          path: ${{ env.TEBAKO_DIR }}
          ref: ${{ env.TEBAKO_TAG }}
          submodules: true

      - name: Create deps folder
        run: mkdir -p -v ${{ env.TEBAKO_DIR }}/${{ env.DEPS }}

      - name: Tebako setup cache
        id: cache
        uses: actions/cache@v2
        with:
          path: ${{ env.TEBAKO_DIR }}/${{ env.DEPS }}
          key: ${{ env.OS_VER }}-${{ env.CC }}-${{ env.TEBAKO_TAG }}-${{ env.RUBY_HASH }}-v${{ env.CACHE_VER }}

      - name: Tebako cache check
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          echo "Failed to load cache"
          false
      # ------- End of tebako prerequisites

      - uses: metanorma/metanorma-build-scripts/gh-rubygems-setup-action@main
        with:
          token: ${{ secrets.METANORMA_CI_PAT_TOKEN }}

      - run: |
          curl -Lks 'https://git.io/rg-ssl' | ruby
          echo "perl -v: $(perl -v)"
          echo "cc -v: $($CC -v)"
          echo "CXX -v: $($CXX -v)"

      - name: package metanorma
        run: make build/bin/metanorma-linux-musl-x86_64

      - uses: actions/upload-artifact@v2
        with:
          name: metanorma-linux-musl-x86_64
          path: build/bin/metanorma-linux-musl-x86_64

  test:
    needs: build
    runs-on: ubuntu-latest
    container:
      image: alpine:latest
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      fail-fast: false
      max-parallel: 3
      matrix:
        experimental: [ false ]
        test-flavor:
          - iso
          - cc
          - iec
          - ogc
          - itu
          - bipm
          - ietf
          - un
          - iho
          - csa
        include:
          - test-flavor: m3aawg
            experimental: true
          - test-flavor: jcgm
            experimental: true
    steps:
      - uses: actions/checkout@v3

      - run: rm Gemfile

      - uses: actions/download-artifact@v2
        with:
          name: metanorma-linux-musl-x86_64
          path: build/bin

      - uses: actions/cache@v2
        with:
          path: ~/.relaton
          key: relaton-linux-${{ matrix.test-flavor }}
          restore-keys: relaton-linux-${{ matrix.test-flavor }}

      - run: chmod +x build/bin/metanorma-linux-musl-x86_64

      - name: Fetch samples (${{ matrix.test-flavor }})
        uses: actions/checkout@v3
        with:
          submodules: recursive
          repository: metanorma/mn-samples-${{ matrix.test-flavor }}
          token: ${{ secrets.METANORMA_CI_PAT_TOKEN }}
          path: ${{ github.workspace }}/samples
          fetch-depth: 1

      - name: Test (${{ matrix.test-flavor }})
        timeout-minutes: 45
        run: |
          build/bin/metanorma-linux-musl-x86_64 \
            site generate samples \
            -c samples/metanorma.yml \
            -o site-${{ matrix.test-flavor }} \
            --agree-to-terms

      - uses: actions/upload-artifact@v2
        with:
          name: site-${{ matrix.test-flavor }}
          path: site-${{ matrix.test-flavor }}

  release:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: metanorma-linux-musl-x86_64
          path: build/bin

      - name: Package binary into archive
        run: |
          chmod +x build/bin/metanorma-linux-musl-x86_64
          mv build/bin/metanorma-linux-musl-x86_64 metanorma-linux-musl-x86_64
          tar -czvf metanorma-linux-musl-x86_64.tgz metanorma-linux-musl-x86_64

      - name: Calculate SHA256 hash
        run: |
          sha256sum metanorma-linux-musl-x86_64.tgz | cut -d ' ' -f1 > metanorma-linux-musl-x86_64.tgz.sha256.txt

      - uses: softprops/action-gh-release@v1
        with:
          files: |
            metanorma-linux-musl-x86_64.tgz
            metanorma-linux-musl-x86_64.tgz.sha256.txt

      - uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.METANORMA_CI_PAT_TOKEN }}
          repository: metanorma/metanorma-snap
          event-type: ${{ github.repository }}
          client-payload: '{ "ref": "${{ github.ref }}" }'
