name: linux

on:
  push:
    branches: [ main ]
    tags: [ v* ]
    paths-ignore:
      - .github/workflows/macos.yml
      - .github/workflows/windows.yml
      - .github/workflows/release_tag.yml
      - Makefile.win
  pull_request:
    paths-ignore:
      - .github/workflows/macos.yml
      - .github/workflows/windows.yml
      - .github/workflows/release_tag.yml
      - Makefile.win
  workflow_dispatch:

env:
  CACHE_VER: 05
  OS_VER: "ubuntu-18.04"
  BUILD_TYPE: Release
  CC: clang
  CXX: clang++
# The folders
  TEBAKO_DIR: .archive/tebako
  DEPS: deps
# Versions
  TEBAKO_TAG: "maxirmx-v0.3.0"
  RUBY_VER:   "2.7.5"
  RUBY_HASH:  "2755b900a21235b443bb16dadd9032f784d4a88f143d852bc5d154f22b8781f1"
  BUNDLER_VER: "2.2.3"

jobs:
  setup:
    runs-on: ubuntu-18.04
    steps:

      # Note. This step is required on ubuntu-18 only. GHA ubuntu-20 works off-the-shelf
      - name: Switch to gcc-9
        run: |
          sudo update-alternatives \
            --install /usr/bin/gcc gcc /usr/bin/gcc-9 100 \
            --slave /usr/bin/g++ g++ /usr/bin/g++-9 \
            --slave /usr/bin/gcov gcov /usr/bin/gcov-9
          sudo update-alternatives --set gcc /usr/bin/gcc-9

      - name: Install packages
        run: |
          sudo apt-get -y update
          sudo apt-get -y install \
            binutils-dev libarchive-dev libevent-dev libjemalloc-dev acl-dev \
            libdouble-conversion-dev libiberty-dev liblz4-dev liblzma-dev \
            libssl-dev libboost-context-dev libboost-filesystem-dev \
            libboost-program-options-dev libboost-regex-dev \
            libboost-system-dev libboost-thread-dev libunwind-dev libdwarf-dev \
            libelf-dev libfuse-dev libgoogle-glog-dev libffi-dev libgdbm-dev \
            libyaml-dev libncurses-dev libreadline-dev libsqlite3-dev

      # Note. ppa:team-xbmc is required on ubuntu-18 only. GHA ubuntu-20 will
      # work with 'sudo apt-get install libfmt-dev'
      - name: Update libfmt (bionic)
        run: |
          sudo apt-get -y remove libfmt-dev
          sudo apt-get -y install software-properties-common
          sudo add-apt-repository ppa:team-xbmc/ppa
          sudo apt-get -y update
          sudo apt-get -y install libfmt-dev

      - name: Install libjemalloc 5
        run: |
          sudo apt-get remove libjemalloc-dev
          wget -q https://github.com/jemalloc/jemalloc/releases/download/5.2.1/jemalloc-5.2.1.tar.bz2
          tar -xf jemalloc-5.2.1.tar.bz2
          cd jemalloc-5.2.1
          ./configure --prefix='/usr'
          make
          sudo make install
          
      - name: Install Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VER }}
          bundler: ${{ env.BUNDLER_VER }}

      - name: Checkout tebako packaging environment
        uses: actions/checkout@v2
        with:
          repository: tamatebako/tebako
          path: ${{ env.TEBAKO_DIR }}
          ref: ${{ env.TEBAKO_TAG }}

      - name: Create deps folder
        run: mkdir -p -v ${{ env.TEBAKO_DIR }}/${{ env.DEPS }}

      - name: Tebako setup cache
        id: cache
        uses: actions/cache@v2
        with:
          path: ${{ env.TEBAKO_DIR }}/${{ env.DEPS }}
          key: ${{ github.workflow }}-${{ env.OS_VER }}-${{ env.CC }}-${{ env.TEBAKO_TAG }}-${{ env.RUBY_HASH }}-v${{ env.CACHE_VER }}

      - name: Tebako setup
        if: steps.cache.outputs.cache-hit != 'true'
        run: ${{ env.TEBAKO_DIR }}/bin/tebako setup

  build:
    runs-on: ubuntu-18.04
    needs: setup
    steps:
      - uses: actions/checkout@v2

      # ---------- Start of tebako prerequisites
      # Note. This step is required on ubuntu-18 only. GHA ubuntu-20 works off-the-shelf
      - name: Switch to gcc-9
        run: |
          sudo update-alternatives \
            --install /usr/bin/gcc gcc /usr/bin/gcc-9 100 \
            --slave /usr/bin/g++ g++ /usr/bin/g++-9 \
            --slave /usr/bin/gcov gcov /usr/bin/gcov-9
          sudo update-alternatives --set gcc /usr/bin/gcc-9

      - name: Install packages
        run: |
          sudo apt-get -y update
          sudo apt-get -y install \
            binutils-dev libarchive-dev libevent-dev acl-dev \
            libdouble-conversion-dev libiberty-dev liblz4-dev liblzma-dev \
            libssl-dev libboost-context-dev libboost-filesystem-dev \
            libboost-program-options-dev libboost-regex-dev \
            libboost-system-dev libboost-thread-dev libunwind-dev libdwarf-dev \
            libelf-dev libfuse-dev libgoogle-glog-dev libffi-dev libgdbm-dev \
            libyaml-dev libncurses-dev libreadline-dev libsqlite3-dev

      # Note. ppa:team-xbmc is required on ubuntu-18 only. GHA ubuntu-20 will
      # work with 'sudo apt-get install libfmt-dev'
      - name: Update libfmt (bionic)
        run: |
          sudo apt-get -y remove libfmt-dev
          sudo apt-get -y install software-properties-common
          sudo add-apt-repository ppa:team-xbmc/ppa
          sudo apt-get -y update
          sudo apt-get -y install libfmt-dev

      - name: Install libjemalloc 5
        run: |
          sudo apt-get remove libjemalloc-dev
          wget -q https://github.com/jemalloc/jemalloc/releases/download/5.2.1/jemalloc-5.2.1.tar.bz2
          tar -xf jemalloc-5.2.1.tar.bz2
          cd jemalloc-5.2.1
          ./configure --prefix='/usr'
          make
          sudo make install
      
      - name: Install Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VER }}
          bundler: ${{ env.BUNDLER_VER }}

       - name: Checkout tebako packaging environment
        uses: actions/checkout@v2
        with:
          repository: tamatebako/tebako
          path: ${{ env.TEBAKO_DIR }}
          ref: ${{ env.TEBAKO_TAG }}

      - name: Create deps folder
        run: mkdir -p -v ${{ env.TEBAKO_DIR }}/${{ env.DEPS }}

      - name: Tebako setup cache
        id: cache
        uses: actions/cache@v2
        with:
          path: ${{ env.TEBAKO_DIR }}/${{ env.DEPS }}
          key: ${{ github.workflow }}-${{ env.OS_VER }}-${{ env.CC }}-${{ env.TEBAKO_TAG }}-${{ env.RUBY_HASH }}-v${{ env.CACHE_VER }}

      - name: Tebako cache check
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          echo "Failed to load cache"
          false
      # ------- End of tebako prerequisites

      - uses: metanorma/metanorma-build-scripts/gh-rubygems-setup-action@master
        with:
          token: ${{ secrets.METANORMA_CI_PAT_TOKEN }}

      - run: |
          curl -Lks 'https://git.io/rg-ssl' | ruby
          echo "perl -v: $(perl -v)"
          echo "cc -v: $($CC -v)"
          echo "CXX -v: $($CXX -v)"

      - name: package metanorma
        run: make build/bin/metanorma-linux-x86_64

      - uses: actions/upload-artifact@v2
        with:
         name: metanorma-linux-x86_64
         path: build/bin/metanorma-linux-x86_64

      - name: smoke test
        run: build/bin/metanorma-linux-x86_64 help

  test:
    needs: build
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.ignore-errors }}
    strategy:
      fail-fast: false
      max-parallel: 3
      matrix:
        os: [ ubuntu-18.04, ubuntu-20.04 ]
        ignore-errors: [ false ]
        test-flavor:
          - iso
          - cc
          - un
          - iec
          - csa
          - bipm
          - ietf
          - ogc
        include:
          - os: ubuntu-18.04
            test-flavor: m3aawg
            ignore-errors: true
          - os: ubuntu-18.04
            test-flavor: jcgm
            ignore-errors: true
          - os: ubuntu-18.04
            test-flavor: itu
            ignore-errors: true
          - os: ubuntu-18.04
            test-flavor: iho
            ignore-errors: true
          - os: ubuntu-20.04
            test-flavor: m3aawg
            ignore-errors: true
          - os: ubuntu-20.04
            test-flavor: jcgm
            ignore-errors: true
          - os: ubuntu-20.04
            test-flavor: itu
            ignore-errors: true
          - os: ubuntu-20.04
            test-flavor: iho
            ignore-errors: true
    steps:
      - uses: actions/checkout@v2

      - uses: actions/download-artifact@v2
        with:
          name: metanorma-linux-x86_64
          path: build/bin

      - uses: actions/cache@v2
        with:
          path: ~/.relaton
          key: relaton-linux-${{ matrix.test-flavor }}
          restore-keys: relaton-linux-${{ matrix.test-flavor }}

      - run: chmod +x build/bin/metanorma-linux-x86_64

      - name: Test processing for ${{ matrix.test-flavor }}
        timeout-minutes: 45
        run: make test-flavor
        env:
          GITHUB_CREDENTIALS: "metanorma-ci:${{ secrets.METANORMA_CI_PAT_TOKEN }}"
          TEST_FLAVOR: ${{ matrix.test-flavor }}

      - uses: actions/upload-artifact@v2
        with:
          name: site
          path: site/**

  release:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: metanorma-linux-x86_64
          path: build/bin

      - name: Package binary into archive
        run: |
          chmod +x build/bin/metanorma-linux-x86_64
          mv build/bin/metanorma-linux-x86_64 metanorma-linux-x86_64
          tar -czvf metanorma-linux-x86_64.tgz metanorma-linux-x86_64

      - run: sha256sum metanorma-linux-x86_64.tgz > metanorma-linux-x86_64.tgz.sha256.txt

      - uses: softprops/action-gh-release@v1
        with:
          files: |
            metanorma-linux-x86_64.tgz
            metanorma-linux-x86_64.tgz.sha256.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.METANORMA_CI_PAT_TOKEN }}
          repository: metanorma/metanorma-snap
          event-type: ${{ github.repository }}
          client-payload: '{ "ref": "${{ github.ref }}" }'
