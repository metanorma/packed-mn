name: macos

on:
  schedule:
    - cron: "0 6 * * 2"
  push:
    branches: [ main ]
    tags: [ v* ]
    paths-ignore:
      - .github/workflows/ubuntu.yml
      - .github/workflows/windows.yml
      - .github/workflows/alpine.yml
      - .github/workflows/release_tag.yml
      - Makefile.win
  pull_request:
    paths-ignore:
      - .github/workflows/ubuntu.yml
      - .github/workflows/windows.yml
      - .github/workflows/alpine.yml
      - .github/workflows/release_tag.yml
      - Makefile.win
  workflow_dispatch:

concurrency:
  group: '${{ github.workflow }}-${{ github.job }}-${{ github.head_ref || github.ref_name }}'
  cancel-in-progress: true

jobs:
  # https://wildwolf.name/github-actions-how-to-avoid-running-the-same-workflow-multiple-times/
  prepare:
    runs-on: ubuntu-latest
    outputs:
      head_tag: ${{ steps.check.outputs.head_tag }}
      foreign_pr: ${{ steps.check.outputs.foreign_pr }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Retrieve tags
        run: git fetch --depth=1 origin +refs/tags/*:refs/tags/* || true
      - name: Set output variables
        id: check
        run: |
          fpr="no"
          tag=""
          if [[ "${{ github.ref }}" == refs/heads/* ]]; then
            tag="$(git tag --points-at HEAD)"
          elif [[ "${{ github.ref }}" == refs/pull/* ]] && [ "${{ github.event.pull_request.head.repo.full_name }}" != "${{ github.event.pull_request.base.repo.full_name }}" ]; then
            fpr="yes"
          fi
          echo "foreign_pr=${fpr}" >> $GITHUB_OUTPUT
          echo "head_tag=${tag}" >> $GITHUB_OUTPUT
  setup:
    runs-on: macos-11
    needs: prepare
    if: "(github.event_name == 'push' && needs.prepare.outputs.head_tag == '') || github.event_name == 'pull_request'"
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup environment
        run: cat common.env macos.env >> $GITHUB_ENV

      - name: Select XCode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}

      - name: Install packages
        run: |
          brew install \
          bison flex binutils double-conversion boost jemalloc fmt glog \
          gnu-getopt gnu-sed bash ncurses libffi pkg-config

      - name: Checkout tebako packaging environment
        uses: actions/checkout@v3
        with:
          repository: tamatebako/tebako
          path: ${{ env.TEBAKO_DIR }}
          ref: ${{ env.TEBAKO_TAG }}
          submodules: true

      - name: Create deps folder
        run: mkdir -p -v ${{ env.TEBAKO_DIR }}/${{ env.DEPS }}

      - name: Tebako setup cache
        id: cache
        uses: actions/cache@v3
        with:
          path: ${{ env.TEBAKO_DIR }}/${{ env.DEPS }}
          key: MacOS-${{ env.OS_VER }}-${{ env.CC }}-${{ hashFiles('**/common.env') }}-${{ hashFiles('**/macos.env') }}-v${{ env.CACHE_VER }}

      - name: Tebako setup
        if: steps.cache.outputs.cache-hit != 'true'
        run: ${{ env.TEBAKO_DIR }}/bin/tebako setup

  build:
    runs-on: macos-11
    needs: setup
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup environment
        run: cat common.env macos.env >> $GITHUB_ENV

      # ---------- Start of tebako prerequisites
      - name: Select XCode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}

      - name: Install packages
        run: |
          brew install \
          bison flex binutils double-conversion boost jemalloc fmt glog \
          gnu-getopt gnu-sed bash ncurses libffi pkg-config

      - name: Install Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VER }}
          bundler: ${{ env.BUNDLER_VER }}

      - name: Checkout tebako packaging environment
        uses: actions/checkout@v3
        with:
          repository: tamatebako/tebako
          path: ${{ env.TEBAKO_DIR }}
          ref: ${{ env.TEBAKO_TAG }}
          submodules: true

      - name: Create deps folder
        run: mkdir -p -v ${{ env.TEBAKO_DIR }}/${{ env.DEPS }}

      - name: Tebako setup cache
        id: cache
        uses: actions/cache@v3
        with:
          path: ${{ env.TEBAKO_DIR }}/${{ env.DEPS }}
          key: MacOS-${{ env.OS_VER }}-${{ env.CC }}-${{ hashFiles('**/common.env') }}-${{ hashFiles('**/macos.env') }}-v${{ env.CACHE_VER }}

      - name: Tebako cache check
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          echo "Failed to load cache"
          false
      # ------- End of tebako prerequisites

      - uses: metanorma/metanorma-build-scripts/gh-rubygems-setup-action@main
        with:
          token: ${{ secrets.METANORMA_CI_PAT_TOKEN }}

      - run: |
          curl -Lks 'https://git.io/rg-ssl' | ruby
          echo "perl -v: $(perl -v)"
          echo "cc -v: $($CC -v)"
          echo "CXX -v: $($CXX -v)"

      - name: package metanorma
        run: make build/bin/metanorma-darwin-x86_64

      - uses: actions/upload-artifact@v3
        with:
          name: metanorma-darwin-x86_64
          path: build/bin/metanorma-darwin-x86_64

      - name: Verify packaging
        run: |
          build/bin/metanorma-darwin-x86_64 --tebako-extract extracted_source_filesystem
          diff -r extracted_source_filesystem .archive/tebako/output/source_filesystem

      - name: Smoke test
        run: build/bin/metanorma-darwin-x86_64 help

  test:
    needs: build
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      fail-fast: false
      max-parallel: 5
      matrix:
        os: [ macos-11 ]
        experimental: [ false ]
        test-flavor:
          - iso
          - cc
          - iec
          - ogc
          - itu
          - bipm
          - ietf
          - un
          - iho
          - csa
          - m3aawg
          - jcgm
          - ieee
          - ieee-private
    steps:
      - uses: actions/checkout@v3

      - run: rm Gemfile

      - uses: actions/download-artifact@v3
        with:
          name: metanorma-darwin-x86_64
          path: build/bin

      - run: brew install gflags

      - run: chmod a+x build/bin/metanorma-darwin-x86_64

      - uses: actions/cache@v3
        with:
          path: ~/.relaton
          key: relaton-macos-${{ matrix.test-flavor }}
          restore-keys: relaton-macos-${{ matrix.test-flavor }}

      - name: Fetch samples (${{ matrix.test-flavor }})
        uses: actions/checkout@v3
        with:
          submodules: recursive
          repository: metanorma/mn-samples-${{ matrix.test-flavor }}
          token: ${{ secrets.METANORMA_CI_PAT_TOKEN }}
          path: ${{ github.workspace }}/samples
          fetch-depth: 1

      - name: Test (${{ matrix.test-flavor }})
        timeout-minutes: 45
        run: |
          build/bin/metanorma-darwin-x86_64 \
            site generate samples \
            -c samples/metanorma.yml \
            -o site-${{ matrix.test-flavor }} \
            --agree-to-terms

      - uses: actions/upload-artifact@v3
        with:
          name: site-${{ matrix.test-flavor }}
          path: site-${{ matrix.test-flavor }}

  release:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: macos-11
    needs: test
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: metanorma-darwin-x86_64
          path: build/bin

      - name: Package binary into archive
        run: |
          chmod a+x build/bin/metanorma-darwin-x86_64
          cp build/bin/metanorma-darwin-x86_64 metanorma-darwin-x86_64
          tar -czvf metanorma-darwin-x86_64.tgz metanorma-darwin-x86_64

      - name: Calculate SHA256 hash
        run: |
          brew install coreutils
          sha256sum metanorma-darwin-x86_64.tgz | cut -d ' ' -f1 > metanorma-darwin-x86_64.tgz.sha256.txt

      - uses: softprops/action-gh-release@v1
        with:
          files: |
            metanorma-darwin-x86_64.tgz
            metanorma-darwin-x86_64.tgz.sha256.txt

      - uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.METANORMA_CI_PAT_TOKEN }}
          repository: metanorma/homebrew-metanorma
          event-type: ${{ github.repository }}
          client-payload: '{ "ref": "${{ github.ref }}" }'
